var documenterSearchIndex = {"docs":
[{"location":"#SpineInterface.jl-1","page":"Home","title":"SpineInterface.jl","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"A Julia interface to a Spine database.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"A package to talk to Spine databases in Julia.","category":"page"},{"location":"#Package-features-1","page":"Home","title":"Package features","text":"","category":"section"},{"location":"#Library-outline-1","page":"Home","title":"Library outline","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Pages = [\"library.md\"]\r\nDepth = 3","category":"page"},{"location":"library/#Library-1","page":"Library","title":"Library","text":"","category":"section"},{"location":"library/#","page":"Library","title":"Library","text":"Documentation for SpineInterface.jl.","category":"page"},{"location":"library/#Contents-1","page":"Library","title":"Contents","text":"","category":"section"},{"location":"library/#","page":"Library","title":"Library","text":"Pages = [\"library.md\"]\r\nDepth = 3","category":"page"},{"location":"library/#Index-1","page":"Library","title":"Index","text":"","category":"section"},{"location":"library/#","page":"Library","title":"Library","text":"","category":"page"},{"location":"library/#Types-1","page":"Library","title":"Types","text":"","category":"section"},{"location":"library/#","page":"Library","title":"Library","text":"ObjectLike\r\nObject\r\nAnything","category":"page"},{"location":"library/#SpineInterface.ObjectLike","page":"Library","title":"SpineInterface.ObjectLike","text":"ObjectLike\n\nSupertype for Object and TimeSlice.\n\n\n\n\n\n","category":"type"},{"location":"library/#SpineInterface.Object","page":"Library","title":"SpineInterface.Object","text":"Object\n\nA type for representing an object in a Spine db.\n\n\n\n\n\n","category":"type"},{"location":"library/#SpineInterface.Anything","page":"Library","title":"SpineInterface.Anything","text":"Anything\n\nA type with not fields that is the type of anything.\n\n\n\n\n\n","category":"type"},{"location":"library/#Functions-1","page":"Library","title":"Functions","text":"","category":"section"},{"location":"library/#","page":"Library","title":"Library","text":"using_spinedb(::String)\r\nParameter()\r\nObjectClass()\r\nRelationshipClass()","category":"page"},{"location":"library/#SpineInterface.using_spinedb-Tuple{String}","page":"Library","title":"SpineInterface.using_spinedb","text":"using_spinedb(db_url::String; upgrade=false)\n\nCreate and export convenience functors for accessing the database at the given url in RFC-1738 format.\n\nIf upgrade is true, then the database at url is upgraded to the latest version.\n\nSee Parameter(), ObjectClass(), and RelationshipClass() for details about the convenience functors.\n\n\n\n\n\n","category":"method"},{"location":"library/#SpineInterface.Parameter-Tuple{}","page":"Library","title":"SpineInterface.Parameter","text":"(p::Parameter)(;kwargs..., i=nothing, k=nothing, t=nothing)\n\nThe value of parameter p for the object or relationship specified by kwargs of the form object_class=:object.\n\ni is an Integer for retrieving a specific index in case of an array value (ignored otherwise).\n\nk is a String for retrieving a specific key in case of a dictionary value (ignored otherwise).\n\nt is a TimeSlice for retrieving a specific time-index in case of a time-varying value (ignored otherwise).\n\nExample\n\njulia> using SpineInterface;\njulia> url = joinpath(dirname(pathof(SpineInterface)), \"..\", \"examples/data/example.sqlite\");\njulia> using_spinedb(url)\njulia> demand(node=:Sthlm, i=1)\n21\njulia> tax_net_flow(node=:Sthlm, commodity=:water)\n4\n\n\n\n\n\n","category":"method"},{"location":"library/#SpineInterface.ObjectClass-Tuple{}","page":"Library","title":"SpineInterface.ObjectClass","text":"(oc::ObjectClass)(;kwargs...)\n\nA list of Object instances corresponding to the objects in class oc.\n\nkwargs of the form parameter_name=value act as filtering conditions.\n\n\n\n\n\n","category":"method"},{"location":"library/#SpineInterface.RelationshipClass-Tuple{}","page":"Library","title":"SpineInterface.RelationshipClass","text":"(rc::RelationshipClass)(;kwargs..., _compact=true, _default=[])\n\nA list of Object tuples corresponding to the relationships of class rc.\n\nkwargs of the form object_class=:object act as filtering conditions.\n\n_compact indicates whether or not filtered objects should be skipped in the resulting tuple.\n\n_default is a value to return in case no relationship meets the filter.\n\n\n\n\n\n","category":"method"},{"location":"library/#Constants-1","page":"Library","title":"Constants","text":"","category":"section"},{"location":"library/#","page":"Library","title":"Library","text":"db_api\r\nanything","category":"page"}]
}
