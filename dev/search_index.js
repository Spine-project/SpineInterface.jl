var documenterSearchIndex = {"docs":
[{"location":"#SpineInterface.jl-1","page":"Home","title":"SpineInterface.jl","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"A Julia interface to a Spine database.","category":"page"},{"location":"#","page":"Home","title":"Home","text":"A package to talk to Spine databases in Julia.","category":"page"},{"location":"#Package-features-1","page":"Home","title":"Package features","text":"","category":"section"},{"location":"#Library-outline-1","page":"Home","title":"Library outline","text":"","category":"section"},{"location":"#","page":"Home","title":"Home","text":"Pages = [\"library.md\"]\r\nDepth = 3","category":"page"},{"location":"library/#Library-1","page":"Library","title":"Library","text":"","category":"section"},{"location":"library/#","page":"Library","title":"Library","text":"Documentation for SpineInterface.jl.","category":"page"},{"location":"library/#Contents-1","page":"Library","title":"Contents","text":"","category":"section"},{"location":"library/#","page":"Library","title":"Library","text":"Pages = [\"library.md\"]\r\nDepth = 3","category":"page"},{"location":"library/#Index-1","page":"Library","title":"Index","text":"","category":"section"},{"location":"library/#","page":"Library","title":"Library","text":"","category":"page"},{"location":"library/#Types-1","page":"Library","title":"Types","text":"","category":"section"},{"location":"library/#","page":"Library","title":"Library","text":"ObjectLike\r\nObject\r\nTimeSlice\r\nAnything","category":"page"},{"location":"library/#SpineInterface.ObjectLike","page":"Library","title":"SpineInterface.ObjectLike","text":"ObjectLike\n\nSupertype for Object and TimeSlice.\n\n\n\n\n\n","category":"type"},{"location":"library/#SpineInterface.Object","page":"Library","title":"SpineInterface.Object","text":"Object\n\nA type for representing an object in a Spine db.\n\n\n\n\n\n","category":"type"},{"location":"library/#SpineInterface.TimeSlice","page":"Library","title":"SpineInterface.TimeSlice","text":"TimeSlice\n\nA type for representing a slice of time.\n\n\n\n\n\n","category":"type"},{"location":"library/#SpineInterface.Anything","page":"Library","title":"SpineInterface.Anything","text":"Anything\n\nA type with no fields that is the type of anything.\n\n\n\n\n\n","category":"type"},{"location":"library/#Functions-1","page":"Library","title":"Functions","text":"","category":"section"},{"location":"library/#","page":"Library","title":"Library","text":"using_spinedb(::String)\r\nObjectClass()\r\nRelationshipClass()\r\nParameter()\r\nTimeSlice(::DateTime, ::DateTime)\r\nduration(::TimeSlice)\r\nbefore(::TimeSlice, ::TimeSlice)\r\nin(::TimeSlice, ::TimeSlice)\r\noverlaps(::TimeSlice, ::TimeSlice)\r\noverlap_duration(::TimeSlice, ::TimeSlice)\r\nt_lowest_resolution(t_iter)\r\nt_highest_resolution(t_iter)\r\nwrite_results(::String)","category":"page"},{"location":"library/#SpineInterface.using_spinedb-Tuple{String}","page":"Library","title":"SpineInterface.using_spinedb","text":"using_spinedb(db_url::String; upgrade=false)\n\nTake the Spine database at the given RFC-1738 url, and export convenience functors named after each object class, relationship class, and parameter in it. These functors can be used to retrieve specific contents in the db.\n\nIf upgrade is true, then the database at url is upgraded to the latest revision.\n\nSee ObjectClass(), RelationshipClass(), and Parameter() for details on how to call the convenience functors.\n\n\n\n\n\n","category":"method"},{"location":"library/#SpineInterface.ObjectClass-Tuple{}","page":"Library","title":"SpineInterface.ObjectClass","text":"(<oc>::ObjectClass)(;<keyword arguments>)\n\nAn Array of Object instances corresponding to the objects in class oc.\n\nArguments\n\nFor each parameter associated to oc in the database there is a keyword argument named after it. The purpose is to filter the result by specific values of that parameter.\n\nExamples\n\njulia> using SpineInterface;\n\njulia> url = \"sqlite:///\" * joinpath(dirname(pathof(SpineInterface)), \"..\", \"examples/data/example.sqlite\");\n\njulia> using_spinedb(url)\n\njulia> node()\n5-element Array{Object,1}:\n Nimes\n Sthlm\n Leuven\n Espoo\n Dublin\n\njulia> commodity(state_of_matter=:gas)\n1-element Array{Object,1}:\n wind\n\n\n\n\n\n\n","category":"method"},{"location":"library/#SpineInterface.RelationshipClass-Tuple{}","page":"Library","title":"SpineInterface.RelationshipClass","text":"(<rc>::RelationshipClass)(;<keyword arguments>)\n\nAn Array of Object tuples corresponding to the relationships of class rc.\n\nArguments\n\nFor each object class in rc there is a keyword argument named after it. The purpose is to filter the result by an object or list of objects of that class, or to accept all objects of that class by specifying anything for this argument.\n_compact::Bool=true: whether or not filtered object classes should be removed from the resulting tuples.\n_default=[]: the default value to return in case no relationship passes the filter.\n\nExamples\n\njulia> using SpineInterface;\n\njulia> url = \"sqlite:///\" * joinpath(dirname(pathof(SpineInterface)), \"..\", \"examples/data/example.sqlite\");\n\njulia> using_spinedb(url)\n\njulia> node__commodity()\n5-element Array{NamedTuple{(:node, :commodity),Tuple{Object,Object}},1}:\n (node = Nimes, commodity = water)\n (node = Sthlm, commodity = water)\n (node = Leuven, commodity = wind)\n (node = Espoo, commodity = wind)\n (node = Dublin, commodity = wind)\n\njulia> node__commodity(commodity=:water)\n2-element Array{Object,1}:\n Nimes\n Sthlm\n\njulia> node__commodity(node=(:Dublin, :Espoo))\n1-element Array{Object,1}:\n wind\n\njulia> node__commodity(node=anything)\n2-element Array{Object,1}:\n water\n wind\n\njulia> node__commodity(commodity=:water, _compact=false)\n2-element Array{NamedTuple{(:node, :commodity),Tuple{Object,Object}},1}:\n (node = Nimes, commodity = water)\n (node = Sthlm, commodity = water)\n\njulia> node__commodity(commodity=:gas, _default=:nogas)\n:nogas\n\n\n\n\n\n\n","category":"method"},{"location":"library/#SpineInterface.Parameter-Tuple{}","page":"Library","title":"SpineInterface.Parameter","text":"(<p>::Parameter)(;<keyword arguments>)\n\nThe value of parameter p for a given object or relationship.\n\nArguments\n\nFor each object class associated with p there is a keyword argument named after it. The purpose is to retrieve the value of p for a specific object.\nFor each relationship class associated with p, there is a keyword argument named after each of the object classes involved in it. The purpose is to retrieve the value of p for a specific relationship.\ni::Int64: a specific index to retrieve in case of an array value (ignored otherwise).\nt::TimeSlice: a specific time-index to retrieve in case of a time-varying value (ignored otherwise).\n\nExamples\n\njulia> using SpineInterface;\n\njulia> url = \"sqlite:///\" * joinpath(dirname(pathof(SpineInterface)), \"..\", \"examples/data/example.sqlite\");\n\njulia> using_spinedb(url)\n\njulia> tax_net_flow(node=:Sthlm, commodity=:water)\n4\n\njulia> demand(node=:Sthlm, i=1)\n21\n\n\n\n\n\n\n","category":"method"},{"location":"library/#SpineInterface.TimeSlice-Tuple{DateTime,DateTime}","page":"Library","title":"SpineInterface.TimeSlice","text":"TimeSlice(start::DateTime, end_::DateTime)\n\nConstruct a TimeSlice with bounds given by start and end_.\n\n\n\n\n\n","category":"method"},{"location":"library/#SpineInterface.duration-Tuple{TimeSlice}","page":"Library","title":"SpineInterface.duration","text":"duration(t::TimeSlice)\n\nThe duration of time slice t in minutes.\n\n\n\n\n\n","category":"method"},{"location":"library/#SpineInterface.before-Tuple{TimeSlice,TimeSlice}","page":"Library","title":"SpineInterface.before","text":"before(a::TimeSlice, b::TimeSlice)\n\nDetermine whether the end point of a is exactly the start point of b.\n\n\n\n\n\n","category":"method"},{"location":"library/#SpineInterface.overlaps-Tuple{TimeSlice,TimeSlice}","page":"Library","title":"SpineInterface.overlaps","text":"overlaps(a::TimeSlice, b::TimeSlice)\n\nDetermine whether a and b overlap.\n\n\n\n\n\n","category":"method"},{"location":"library/#SpineInterface.overlap_duration-Tuple{TimeSlice,TimeSlice}","page":"Library","title":"SpineInterface.overlap_duration","text":"overlap_duration(a::TimeSlice, b::TimeSlice)\n\nThe number of minutes where a and b overlap.\n\n\n\n\n\n","category":"method"},{"location":"library/#SpineInterface.t_lowest_resolution-Tuple{Any}","page":"Library","title":"SpineInterface.t_lowest_resolution","text":"t_lowest_resolution(iter)\n\nAn Array with the TimeSlices from the given iterable that are not contained in any other.\n\n\n\n\n\n","category":"method"},{"location":"library/#SpineInterface.t_highest_resolution-Tuple{Any}","page":"Library","title":"SpineInterface.t_highest_resolution","text":"t_highest_resolution(iter)\n\nAn Array with the TimeSlices from the given iterable that do not contain any other.\n\n\n\n\n\n","category":"method"},{"location":"library/#Constants-1","page":"Library","title":"Constants","text":"","category":"section"},{"location":"library/#","page":"Library","title":"Library","text":"anything","category":"page"},{"location":"library/#SpineInterface.anything","page":"Library","title":"SpineInterface.anything","text":"anything\n\nThe singleton instance of type Anything, used to specify all-pass filters in calls to RelationshipClass().\n\n\n\n\n\n","category":"constant"}]
}
